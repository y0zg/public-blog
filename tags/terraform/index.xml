<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>terraform on Oleksandr Kulbida</title>
    <link>https://okulbida.com/tags/terraform/</link>
    <description>Recent content in terraform on Oleksandr Kulbida</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 23 Mar 2024 19:11:15 +0300</lastBuildDate><atom:link href="https://okulbida.com/tags/terraform/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Terraform Best Practices</title>
      <link>https://okulbida.com/posts/terraform-best-practices/</link>
      <pubDate>Sat, 23 Mar 2024 19:11:15 +0300</pubDate>
      
      <guid>https://okulbida.com/posts/terraform-best-practices/</guid>
      <description>Collaboration  Use remote state and state locking  For certain backends like AWS S3, enable versioning to make it easier to recover your state if needed   Agree on naming convention Use meaningful tags to easily identify resources: environment, owner, project keys are must  You can also add cloud-custdodian for components which are out of terrarfom/IaC tools, which could automatically tag your manually created resources with Owner Creator based on CloudTrail events    Don&amp;rsquo;t reinvent the wheel Use existing shared and community modules.</description>
    </item>
    
    <item>
      <title>EKS with instance-store nitro-based node-group</title>
      <link>https://okulbida.com/posts/eks-instance-store/</link>
      <pubDate>Sat, 16 Mar 2024 17:00:51 +0200</pubDate>
      
      <guid>https://okulbida.com/posts/eks-instance-store/</guid>
      <description>Userdata is compatible with the standard AWS EKS Terraform module, with the sole recommendation being the utilization of a custom AMI. In order to use instance-store you also need to install local-static-provisioner - https://github.com/kubernetes-sigs/sig-storage-local-static-provisioner
Terraform example:
eks-dev-instance-store = { instance_types = [&amp;#34;r6id.large&amp;#34;] min_size = 1 max_size = 3 desired_size = 1 block_device_mappings = {# Root volume  xvda = { device_name = &amp;#34;/dev/xvda&amp;#34; ebs = { volume_size = 24 volume_type = &amp;#34;gp3&amp;#34; iops = 3000 encrypted = false delete_on_termination = true } } } ami_id = data.</description>
    </item>
    
  </channel>
</rss>
